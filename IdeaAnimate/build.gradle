apply plugin: 'com.android.library'
apply from: '../constants.gradle'

android {
    signingConfigs {
        release {
            keyAlias 'idea'
            keyPassword 'lyx19951'
            storeFile file('C:/project/IdeaAnimate/idea.jks')
            storePassword 'lyx19951'
        }
    }
    compileSdkVersion project.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionName project.ext.versionName + new Date().format('_yyyyMMddhhmmss')
        versionCode project.ext.versionCode

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:' + supportLibraryVersion
    testImplementation 'junit:junit:' + junitVersion
    androidTestImplementation 'com.android.support.test:runner:' + testRunnerVersion
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:' + testEspresso
}

afterEvaluate {
    assembleDebug.doLast {
        rename('-debug')
        delete(aarPath() + getLibName() + '-debug' + AARsuffix())
    }
    assembleRelease.doLast {
        rename('-release')
        delete(aarPath() + getLibName() + '-release' + AARsuffix())
    }
}

static def aarPath() {
    return 'build/outputs/aar/'
}

static def outputsPath() {
    return 'build/outputs/'
}

static def AARsuffix() {
    return '.aar'
}

def getLibName() {
    return getName()
}

def rename(String buildType) {
    copy {
        from(aarPath() + getName() + buildType + AARsuffix())
        into(outputsPath()) rename {
            getName() + '_v' + project.ext.versionName + new Date().format('_yyyyMMddhhmmss') + buildType + AARsuffix()
        }
    }
    copy {
        from('build/intermediates/bundles/' + buildType.substring(1) + '/classes.jar')
        into(outputsPath()) rename {
            getName() + '_v' + project.ext.versionName + new Date().format('_yyyyMMddhhmmss') + buildType + '.jar'
        }
    }
}